* Variables

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Tobias Ostner"
        user-mail-address "tobias@gmail.com")
  (setq inhibit-startup-message t)
  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)
  (setq ido-use-virtual-buffers t)
  (setq ido-create-new-buffer 'always)
  (setq ido-use-filename-at-point t)
  (setq ring-bell-function 'ignore)
  (setq require-final-newline t)
  (setq whitespace-style '(face space-mark indentation trailing))
  (setq whitespace-display-mappings
        '((space-mark 32 [183] [46])
          (space-mark 160 [164] [95])
          (space-mark 2208 [2212] [95])
          (space-mark 2336 [2340] [95])
          (space-mark 3616 [3620] [95])
          (space-mark 3872 [3876] [95])))
  (setq-default indent-tabs-mode nil)
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (setq-default tab-width 8)
  (defalias 'list-buffers 'ibuffer)
#+END_SRC

* Configurations

#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (ido-mode 1)
  (blink-cursor-mode -1)
  (global-auto-revert-mode t)
  (global-hl-line-mode 1)
  (line-number-mode t)
  (column-number-mode t)
  (size-indication-mode t)
  (scroll-bar-mode -1)
  (set-face-attribute 'default nil :height 100)
  (add-hook 'before-save-hook #'delete-trailing-whitespace)
  (menu-bar-mode -1)
#+END_SRC

* try

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

* org

#+BEGIN_SRC emacs-lisp
  (use-package org
    :ensure t
    :config
    (setq org-log-done 'time)
    (setq org-directory "~/Dropbox/org")
    (setq org-agenda-files '("~/Dropbox/org"))
    (setq org-startup-indented t)
    (setq org-startup-with-inline-images t))

  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

* evil

#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-put-property 'evil-state-properties 'normal   :tag " NORMAL ")
    (evil-put-property 'evil-state-properties 'insert   :tag " INSERT ")
    (evil-put-property 'evil-state-properties 'visual   :tag " VISUAL ")
    (evil-put-property 'evil-state-properties 'motion   :tag " MOTION ")
    (evil-put-property 'evil-state-properties 'emacs    :tag " EMACS ")
    (evil-put-property 'evil-state-properties 'replace  :tag " REPLACE ")
    (evil-put-property 'evil-state-properties 'operator :tag " OPERTR "))

  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode 1))

  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode)
    (evil-mode t) ;; must be set after evil leader mode
    (evil-leader/set-leader "<SPC>")
    (evil-leader/set-key
      "a" 'avy-goto-char
      "pw)" 'paredit-wrap-round
      "pw]" 'paredit-wrap-square
      "pw}" 'paredit-wrap-curly
      "pfs" 'paredit-forward-slurp-sexp
      "pbs" 'paredit-backward-slurp-sexp
      "pfb" 'paredit-forward-barf-sexp
      "pbb" 'paredit-backward-barf-sexp))

  (use-package evil-commentary
    :ensure t
    :diminish evil-commentary-mode
    :config
    (evil-commentary-mode t))
#+END_SRC

* avy

#+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t)
#+END_SRC

* zenburn-theme

#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t
    :config
    (load-theme 'zenburn t))
#+END_SRC

* company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish company-mode
    :config
    (global-company-mode)
    (setq company-idle-delay 0.2)
    (setq company-minimum-prefix-length 1)
    (setq company-show-numbers t)
    (setq company-tooltip-limit 20))
#+END_SRC

* magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    (("C-x g" . magit-status)))
#+END_SRC

* rainbow-delimiters

  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t)
  #+END_SRC

* smex

#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :bind
    ("M-x" . smex))
#+END_SRC

* org-reveal

  #+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
      :ensure t)
  #+END_SRC

* projectile

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :diminish projectile-mode
      :config
      (projectile-global-mode 1))
  #+END_SRC

* paredit

  #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :ensure t)
  #+END_SRC

* clojure mode

  #+BEGIN_SRC emacs-lisp
    (use-package clojure-mode
      :ensure t
      :config
      (add-hook 'clojure-mode-hook #'paredit-mode)
      (add-hook 'clojure-mode-hook #'subword-mode)
      (add-hook 'clojure-mode-hook #'rainbow-delimiters-mode))
  #+END_SRC

* cider

#+BEGIN_SRC emacs-lisp
  (use-package cider
    :ensure t
    :config
    (add-hook 'cider-repl-mode-hook #'paredit-mode)
    (add-hook 'cider-repl-mode-hook #'rainbow-delimiters-mode))
#+END_SRC

* swift-mode

#+BEGIN_SRC emacs-lisp
  (use-package swift-mode
    :ensure t)
#+END_SRC

* iedit

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC

* ido vertical mode

#+BEGIN_SRC emacs-lisp
    (use-package ido-vertical-mode
      :ensure t
      :config
      (ido-vertical-mode 1)
      (setq ido-vertical-show-count t))
#+END_SRC

* beacon mode

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :config
    (beacon-mode))
#+END_SRC

* git-gutter

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :diminish t
    :config
    (global-git-gutter-mode t)
    (custom-set-variables '(git-gutter:update-interval 2)))
#+END_SRC

* web-mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode "\\.html?\\'")
#+END_SRC

* undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line
    :ensure t
    :config
    (sml/setup))
#+END_SRC

