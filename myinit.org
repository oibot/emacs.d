* Avy

#+BEGIN_SRC emacs-lisp
    (use-package avy
      :ensure t
      :config
      (setq avy-background t))
#+END_SRC

* Beacon Mode

#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :diminish beacon-mode
    :config
    (beacon-mode))
#+END_SRC

* Company

#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :diminish ""
    :config
    (global-company-mode)
    (setq company-idle-delay 0.2)
    (setq company-minimum-prefix-length 3)
    (setq company-show-numbers t)
    (setq company-tooltip-limit 20))
#+END_SRC

* Counsel

#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    ("C-s" . swiper)
    ("M-x" . counsel-M-x)
    ("C-x C-f" . counsel-find-file)
    ("C-c k" . counsel-ag)
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) "))
#+END_SRC

* Exec-Path-From-Shell

#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :ensure t
    :config
    (exec-path-from-shell-initialize))
#+END_SRC

* git-gutter

#+BEGIN_SRC emacs-lisp
  (use-package git-gutter
    :ensure t
    :diminish git-gutter-mode
    :config
    (global-git-gutter-mode t)
    (custom-set-variables '(git-gutter:update-interval 2)))
#+END_SRC

* Highlight Indent Guides

#+BEGIN_SRC emacs-lisp
  (use-package highlight-indent-guides
    :ensure t
    :config
    (setq highlight-indent-guides-method 'character))
#+END_SRC

* iedit

#+BEGIN_SRC emacs-lisp
  (use-package iedit
    :ensure t)
#+END_SRC

* Js2-mode

#+BEGIN_SRC emacs-lisp
  (use-package js2-mode
    :ensure t
    :mode "\\.js\\'")
#+End_SRC

* Magit

#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :bind
    (("C-x g" . magit-status)))
#+END_SRC

* Markdown-Mode

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
           ("\\.md\\'" . markdown-mode)
           ("\\.markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC

* Neotree

#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :config
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow))
    (setq projectile-switch-project-action 'neotree-projectile-action)
    (add-hook 'neotree-mode-hook
              (lambda ()
                (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
                (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter))))
#+END_SRC
* Org

#+BEGIN_SRC emacs-lisp
      (use-package org
        :ensure t
        :config
        (setq org-directory "~/Nextcloud/org")
        (setq org-agenda-files '("~/Nextcloud/org"))
        (setq org-log-done 'time)

        (setq org-startup-indented t)
        (setq org-startup-with-inline-images t)
        (setq org-startup-with-latex-preview nil)
        (plist-put org-format-latex-options :scale 1.5)
        (setq org-src-fontify-natively t)

        (require 'ob-clojure)
        (org-babel-do-load-languages
         'org-babel-load-languages
         '((clojure . t)
           (emacs-lisp . t)
           (ditaa . t)
           (python . t)
           (ipython . t)))
        (setq org-babel-clojure-backend 'cider)
        (setq org-confirm-babel-evaluate nil)

        (add-hook 'org-mode-hook (lambda ()
                                   (setq fill-column 90)
                                   (turn-on-auto-fill)))

        (setq org-ditaa-jar-path "/usr/local/Cellar/ditaa/0.10/libexec/ditaa0_10.jar"))

      (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure t
    :config
    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0"))
#+END_SRC

** org-journal

#+BEGIN_SRC emacs-lisp
    (use-package org-journal
      :ensure t
      :config
      (setq org-journal-dir "~/Dropbox/org/journal"))
#+End_SRC

* paredit

  #+BEGIN_SRC emacs-lisp
    (use-package paredit
      :ensure t)
  #+END_SRC

* Projectile

  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :diminish projectile-mode
      :config
      (projectile-global-mode 1))
  #+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-on))
#+END_SRC

* Rainbow Mode

#+BEGIN_SRC emacs-lisp
    (use-package rainbow-mode
      :ensure t
      :config
      (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
* rainbow-delimiters

  #+BEGIN_SRC emacs-lisp
    (use-package rainbow-delimiters
      :ensure t)
  #+END_SRC

* try

#+BEGIN_SRC emacs-lisp
  (use-package try
    :ensure t)
#+END_SRC

* undo-tree

#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :diminish undo-tree-mode)
#+END_SRC

* Variables

#+BEGIN_SRC emacs-lisp
  (setq user-full-name "Tobias Ostner"
        user-mail-address "tobias.ostner@gmail.com")

  ;; (setq ido-enable-flex-matching t)
  ;; (setq ido-everywhere t)
  ;; (setq ido-use-virtual-buffers t)
  ;; (setq ido-create-new-buffer 'always)
  ;; (setq ido-use-filename-at-point t)

  (setq require-final-newline t)
  (setq-default tab-width 8)
  (setq whitespace-style '(face space-mark indentation trailing))
  (setq whitespace-display-mappings
        '((space-mark 32 [183] [46])
          (space-mark 160 [164] [95])
          (space-mark 2208 [2212] [95])
          (space-mark 2336 [2340] [95])
          (space-mark 3616 [3620] [95])
          (space-mark 3872 [3876] [95])))
  (setq-default indent-tabs-mode nil)

  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
  (setq make-backup-files nil)

  (defalias 'list-buffers 'ibuffer)
#+END_SRC

* web-mode

#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :mode "\\.html?\\'")
#+END_SRC

* which-key

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config
    (which-key-mode))
#+END_SRC

* yaml-mode

#+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :ensure t
    :mode (("\\.yml\\'" . yaml-mode)))

#+END_SRC
* Dockerfile-mode

#+BEGIN_SRC emacs-lisp
  (use-package dockerfile-mode
    :ensure t
    :mode "Dockerfile\\'")
#+END_SRC
* Python

#+BEGIN_SRC emacs-lisp
  (use-package elpy
    :ensure t
    :config
    (elpy-enable))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package ob-ipython
    :ensure t
    :config
    (require 'ob-ipython))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company-jedi
    :ensure t
    :config
    (add-to-list 'company-backends 'company-jedi))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :ensure t
    :config
    (setenv "WORKON_HOME" "~/anaconda3/envs/")
    (pyvenv-mode t))
#+END_SRC

* Highlight-Symbol

#+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
    :ensure t
    :diminish ""
    :config
    (setq-default highlight-symbol-idle-delay 1.5))
#+END_SRC
